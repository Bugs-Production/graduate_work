services:
  billing_api:
    build:
      dockerfile: Dockerfile
      context: ./billing_api
    container_name: billing_api
    env_file:
      - billing_api/src/.env
    restart: always
    networks:
      - billing_network
    volumes:
      - ./billing_api/src:/opt/app/src
      - ./billing_api/logs/:/var/log/app/
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  nginx:
    container_name: billing_nginx
    build:
      context: ./nginx/.
      dockerfile: Dockerfile
    restart: always
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf
      - ./nginx/logs/:/var/log/nginx/
    depends_on:
      - billing_api
    ports:
      - "80:80"
    networks:
      - billing_network

  postgres:
    image: postgres:16
    container_name: postgres_billing
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    env_file: billing_api/src/.env
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h localhost -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 10s
      retries: 5
    networks:
      - billing_network

  test_postgres:
    image: postgres:16
    container_name: test_postgres_billing
    restart: always
    env_file: billing_api/src/.env
    environment:
      - POSTGRES_DB=${TEST_POSTGRES_DB}
      - POSTGRES_USER=${TEST_POSTGRES_USER}
      - POSTGRES_PASSWORD=${TEST_POSTGRES_PASSWORD}
    ports:
      - "127.0.0.1:5433:5432"

  stripe:
    image: "stripe/stripe-cli:latest"
    container_name: stripe-cli
    env_file: billing_api/src/.env
    command:
      "listen --api-key ${STRIPE_API_KEY} --device-name ${STRIPE_DEVICE_NAME} --forward-to localhost:80/api/v1/billing/payment/webhook/"
    network_mode: host

  rabbitmq:
    image: rabbitmq:4.0.4-management
    container_name: rabbitmq
    restart: always
    ports:
      - "15672:15672"  # management
      - ${RABBITMQ_PORT}:${RABBITMQ_PORT}
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - billing_network
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 20
    env_file: billing_api/src/.env

  auth_worker:
    build:
      dockerfile: Dockerfile
      context: ./billing_api
    container_name: auth_worker
    command: python run_auth_worker.py
    env_file: billing_api/src/.env
    restart: always
    networks:
      - billing_network
    volumes:
      - ./billing_api/src:/opt/app/src
      - ./billing_api/logs/:/var/log/app/
    depends_on:
      rabbitmq:
        condition: service_healthy

  notification_worker:
    build:
      dockerfile: Dockerfile
      context: ./billing_api
    container_name: notification_worker
    command: python run_notification_worker.py
    env_file: billing_api/src/.env
    restart: always
    networks:
      - billing_network
    volumes:
      - ./billing_api/src:/opt/app/src
      - ./billing_api/logs/:/var/log/app/
    depends_on:
      rabbitmq:
        condition: service_healthy

networks:
  billing_network:

volumes:
  postgres_data:
